"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("../../../types/enums");
const request_1 = require("../../../utility/request");
const name = (obj) => __awaiter(void 0, void 0, void 0, function* () {
    const params = {};
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'GET';
    switch (obj.type) {
        case 'difficulty':
            url += '/beatmaps/lookup';
            if (obj.id)
                params.id = obj.id;
            if (obj.checksum)
                params.checksum = obj.checksum;
            if (obj.filename)
                params.filename = obj.filename;
            break;
        case 'set':
            url += '/beatmapsets/lookup';
            if (obj.id)
                params.beatmap_id = obj.id;
            break;
        case 'attributes':
            url += `/beatmaps/${obj.id}/attributes`;
            method = 'POST';
            if (obj.mods)
                params.mods = obj.mods;
            if (typeof obj.mode == 'string')
                params.ruleset = obj.mode;
            else if (typeof obj.mode == 'number')
                params.ruleset_id = enums_1.Modes_enums[obj.mode];
            break;
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        params: params,
    });
    if (obj.type == 'attributes')
        return data.attributes;
    return data;
});
exports.default = name;
