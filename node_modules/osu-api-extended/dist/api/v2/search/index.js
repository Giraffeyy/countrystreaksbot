"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("../../../types/enums");
const request_1 = require("../../../utility/request");
const name = (obj) => __awaiter(void 0, void 0, void 0, function* () {
    const params = {};
    let url = 'https://osu.ppy.sh/api/v2';
    switch (obj.type) {
        case 'site':
            url += '/search';
            params.mode = obj.mode;
            params.query = obj.query;
            params.page = obj.page;
            break;
        case 'beatmaps':
            url += '/beatmapsets/search';
            if (obj._played)
                params.played = obj._played ? 'played' : 'unplayed';
            if (obj._nsfw)
                params.nsfw = obj._nsfw;
            if (obj.query)
                params.q = obj.query;
            if (obj.mode)
                params.m = typeof obj.mode == 'number' ? obj.mode : enums_1.Modes_enums[obj.mode];
            if (obj.status)
                params.s = obj.status;
            if (obj.category)
                params.c = obj.category.join('.');
            if (obj.genre)
                params.g = typeof obj.genre == 'number' ? obj.genre : enums_1.Genres_enum[obj.genre];
            if (obj.language)
                params.l = typeof obj.language == 'number' ? obj.language : enums_1.Languages_enum[obj.language];
            if (obj.achieved_rank)
                params.r = obj.achieved_rank.join('.');
            if (obj.extra)
                params.e = obj.extra.join('.');
            if (obj.sort)
                params.sort = obj.sort;
            if (obj.cursor_string)
                params.cursor_string = obj.cursor_string;
            break;
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: 'GET',
        params: params,
    });
    return data;
});
exports.default = name;
