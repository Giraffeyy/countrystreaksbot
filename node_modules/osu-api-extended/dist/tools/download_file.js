"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../utility/request");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
;
const name = (difficulty_id, file_path, overwrite) => new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
    const { dir } = path_1.default.parse(file_path);
    if (!fs_1.default.existsSync(dir))
        fs_1.default.mkdirSync(dir, { recursive: true });
    if (fs_1.default.existsSync(file_path) && overwrite != true) {
        resolve({
            type: 'exists',
            path: file_path,
        });
        return;
    }
    ;
    const data = yield (0, request_1.request)(`https://osu.ppy.sh/osu/${difficulty_id}`, { method: "GET" });
    fs_1.default.writeFile(file_path, data, 'utf8', (err) => {
        if (err) {
            reject(err);
            return;
        }
        ;
        resolve({
            type: data.includes('429 Too Many Requests') ? 'rate-limit' : 'created',
            path: file_path,
        });
    });
}));
exports.default = name;
