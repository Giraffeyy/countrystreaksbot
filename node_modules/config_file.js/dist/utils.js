"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveFile = exports.move = exports.renameKeys = exports.separateByValue = exports.generateUuid = exports.bindOptions = void 0;
const fs_1 = __importDefault(require("fs"));
/**
 * @param defaultOptions
 * @param options
 */
function bindOptions(defaultOptions, options) {
    if (!options)
        return defaultOptions;
    if (!defaultOptions)
        return options;
    // TODO: use structuredClone
    const result = Object.assign({}, defaultOptions);
    const defaultKeys = Object.keys(result);
    for (const key in options) {
        const value = options[key];
        if (!defaultKeys.includes(key)) {
            // since the key is not in the default options, just add it
            result[key] = value;
            continue;
        }
        // check if the value is an pure object
        if (typeof value === "object" && !Array.isArray(value) && value !== null && value !== undefined && value.constructor.name === "Object") {
            result[key] = bindOptions(result[key], value);
        }
        else {
            result[key] = value;
        }
    }
    return result;
}
exports.bindOptions = bindOptions;
/** Generates random uuid v4 */
function generateUuid() {
    const chars = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".split("");
    for (let i = 0; i < chars.length; i++) {
        switch (chars[i]) {
            case "x":
                chars[i] = Math.floor(Math.random() * 16).toString(16);
                break;
            case "y":
                chars[i] = (Math.floor(Math.random() * 4) + 8).toString(16);
                break;
        }
    }
    return chars.join("");
}
exports.generateUuid = generateUuid;
/**
 * @param array
 * @param callback
 */
function separateByValue(array, callback) {
    const result = {};
    for (const element of array) {
        const value = callback(element);
        if (!result[value])
            result[value] = [];
        result[value].push(element);
    }
    return result;
}
exports.separateByValue = separateByValue;
/**
 * @param obj
 * @param newKeys
 */
function renameKeys(obj, newKeys) {
    const keyValues = Object.keys(obj).map(key => {
        const newKey = newKeys[key] || key;
        return { [newKey]: obj[key] };
    });
    return Object.assign({}, ...keyValues);
}
exports.renameKeys = renameKeys;
/**
 * @param dirFrom
 * @param dirTo
 */
function move(dirFrom, dirTo) {
    const files = fs_1.default.readdirSync(dirFrom);
    for (const file of files) {
        const loadedFile = fs_1.default.lstatSync(`${dirFrom}/${file}`);
        if (loadedFile.isDirectory()) {
            if (!fs_1.default.existsSync(`${dirTo}/${file}`))
                fs_1.default.mkdirSync(`${dirTo}/${file}`);
            move(`${dirFrom}/${file}`, `${dirTo}/${file}`);
            fs_1.default.rmdirSync(`${dirFrom}/${file}`, { maxRetries: 3 });
        }
        else {
            moveFile(`${dirFrom}/${file}`, `${dirTo}/${file}`);
        }
    }
}
exports.move = move;
/**
 * @param fileFrom
 * @param fileTo
 */
function moveFile(fileFrom, fileTo) {
    fs_1.default.renameSync(fileFrom, fileTo);
}
exports.moveFile = moveFile;
